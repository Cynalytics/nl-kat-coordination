from collections import Counter
from datetime import datetime
from logging import getLogger
from typing import Any, Dict, List, Union

from django.utils.translation import gettext_lazy as _

from octopoes.models import Reference
from octopoes.models.ooi.dns.zone import Hostname
from octopoes.models.ooi.findings import RiskLevelSeverity
from octopoes.models.ooi.network import IPAddressV4, IPAddressV6
from reports.report_types.definitions import Report
from rocky.views.mixins import HydratedFinding

logger = getLogger(__name__)


class VulnerabilityReport(Report):
    id = "vulnerability-report"
    name = _("Vulnerability Report")
    description: str = _("Vulnerabilities found are grouped for each system.")
    plugins = {"required": ["nmap-ports", "nmap", "nmap-udp", "website-software"], "optional": []}
    input_ooi_types = {Hostname, IPAddressV4, IPAddressV6}
    template_path = "vulnerability_report/report.html"

    def get_finding_valid_time_history(self, reference: str) -> List[datetime]:
        transaction_record = self.octopoes_api_connector.get_history(reference=reference)
        valid_time_history = [transaction.valid_time for transaction in transaction_record]
        return valid_time_history

    def get_findings(self, input_ooi: str, valid_time: datetime) -> Dict[str, List[Union[str, HydratedFinding]]]:
        reference = Reference.from_str(input_ooi)

        findings = []
        aggregated_findings = []
        finding_types = []

        if reference.class_type == Hostname:
            ips = self.octopoes_api_connector.query(
                "Hostname.<hostname[is ResolvedHostname].address", valid_time, reference
            )
        elif reference.class_type in (IPAddressV4, IPAddressV6):
            ips = [self.octopoes_api_connector.get(reference)]

        for ip in ips:
            findings_ip_port = self.octopoes_api_connector.query(
                "IPAddress.<address[is IPPort].<ooi[is Finding]", valid_time, ip.reference
            )

            if reference.class_type == Hostname:
                findings_software = self.octopoes_api_connector.query(
                    "Hostname.<ooi [is SoftwareInstance].software.<ooi[is Finding]", valid_time, reference
                )
            else:
                findings_software = self.octopoes_api_connector.query(
                    "IPAddress.<address [is ResolvedHostname]"
                    ".hostname.<ooi [is SoftwareInstance].software.<ooi[is Finding]",
                    valid_time,
                    ip.reference,
                )

            for finding in findings_ip_port:
                findings.append(finding)
            for finding in findings_software:
                findings.append(finding)

            for finding in findings:
                ip_address = str(ip.address)

                if ip_address in finding.primary_key:
                    aggregated_findings.append(finding)
                    types = self.octopoes_api_connector.query(
                        "Finding.finding_type", valid_time, Reference.from_str(finding)
                    )
                    for finding_type in types:
                        finding_types.append(finding_type)

        return {"finding_types": finding_types, "findings": aggregated_findings}

    def generate_data(self, input_ooi: str, valid_time: datetime) -> Dict[str, Dict[str, Any]]:
        findings = self.get_findings(input_ooi, valid_time)

        vulnerabilities = {}
        occurrences = Counter(findings["finding_types"])
        critical = RiskLevelSeverity.CRITICAL.value
        total_criticals = 0
        first_seen = "-"
        last_seen = "-"
        terms = list(occurrences)
        recommendations = []

        finding_types = list(set(findings["finding_types"]))

        for finding_type in finding_types:
            filtered_findings = {}

            for finding in findings["findings"]:
                if finding.finding_type.tokenized.id == finding_type.id:
                    time_history = self.get_finding_valid_time_history(finding.primary_key)

                    if time_history:
                        last_seen = time_history[0]

                    filtered_findings[finding.primary_key] = {
                        _("Source"): "-",
                        _("First seen"): first_seen,
                        _("Last seen"): last_seen,
                        _("Evidence"): "-",
                    }

                    vulnerabilities[finding_type] = {
                        "cvss": {
                            "class": str(finding_type.risk_severity.value).lower(),
                            "risk_level": str(finding_type.risk_severity.value).title()
                            + " "
                            + str(finding_type.risk_score),
                        },
                        "occurrences": occurrences[finding_type],
                        "description": finding_type.description or "-",
                        "advice": finding_type.recommendation or "-",
                        "findings": filtered_findings,
                    }

                    if finding_type.risk_severity.value == critical:
                        total_criticals += 1

                    if finding_type.recommendation:
                        recommendations.append(finding_type.recommendation)

        summary = {
            "total_findings": sum(occurrences.values()),
            "total_criticals": total_criticals,
            "terms": [term.id for term in terms],
            "recommendations": recommendations,
        }

        return {"vulnerabilities": vulnerabilities, "summary": summary}
