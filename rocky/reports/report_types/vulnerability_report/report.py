from datetime import datetime
from logging import getLogger
from typing import Dict

from django.utils.translation import gettext_lazy as _

from octopoes.models import Reference
from octopoes.models.ooi.findings import RiskLevelSeverity
from octopoes.models.ooi.network import IPAddressV4, IPAddressV6
from reports.report_types.definitions import Report
from rocky.views.mixins import FindingList

logger = getLogger(__name__)

vulnerability_report_mock_data = {
    "CVE-2012-12345": {
        "CVSS": "Critical",
        "Source": "Shodan",
        "First seen": "1 october 2023 11:00",
        "Last seen": "6 october 2023 12:34",
        "Description": "An attacker can get RCE by a buffer overflow.",
        "Advice": "Update the Apache server to version x.y.",
        "Evidence": "Execute the following commands: nc ipv6.example.com 443 "
        "secretdorkbackdoorthing+xklj&^&^^^^/../../../ root #/",
    },
    "CVE-2013-12345": {
        "CVSS": "Medium",
        "Source": "Nmap",
        "First seen": "1 october 2023 12:00",
        "Last seen": "6 october 2023 12:44",
        "Description": "Dangerous description",
        "Advice": "Patch it with your ..",
        "Evidence": "Execute the following commands: nc ipv6.example.com 443 ",
    },
}


class VulnerabilityReport(Report):
    id = "vulnerability-report"
    name = _("Vulnerability Report")
    description: str = _("Vulnerabilities found are grouped for each system.")
    plugins = {"required": ["shodan", "nmap"], "optional": []}
    input_ooi_types = {IPAddressV4, IPAddressV6}
    template_path = "vulnerability_report/report.html"

    def count_critical_finding(self, finding) -> int:
        counted: int = 0
        if finding.finding_type.risk_severity.value == RiskLevelSeverity.CRITICAL:
            counted = 1
        return counted

    def generate_data(self, input_ooi: str, valid_time: datetime) -> Dict[str, Dict[str, Dict[str, str]]]:
        tree_store = self.octopoes_api_connector.get_tree(
            Reference.from_str(input_ooi), depth=1, types=self.input_ooi_types, valid_time=valid_time
        ).store

        refs = [str(tree.address) for tree in tree_store.values()]

        all_severities = {RiskLevelSeverity(severity.value) for severity in RiskLevelSeverity}

        findings = FindingList(
            octopoes_connector=self.octopoes_api_connector,
            valid_time=valid_time,
            exclude_muted=False,
            severities=all_severities,
        )
        data = {}
        filtered_findings = {}
        count_criticals: int = 0

        for finding in findings[:]:
            for ref in refs:
                if ref in finding.ooi.primary_key:
                    count_criticals += self.count_critical_finding(finding)

                    filtered_findings[finding.ooi.primary_key] = {
                        "Finding": finding.finding_type,
                        "CVSS": {
                            "class": str(finding.finding_type.risk_severity.value).lower(),
                            "severity": str(finding.finding_type.risk_severity.value).title()
                            + " "
                            + str(finding.finding_type.risk_score),
                        },
                        "Source": "-",
                        "First seen": "-",
                        "Last seen": "-",
                        "Description": finding.finding_type.description,
                        "Advice": finding.finding_type.recommendation or "-",
                        "Evidence": "-",
                    }
                    data[input_ooi] = filtered_findings
        return data
