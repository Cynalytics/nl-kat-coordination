"""
Django settings for rocky project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import logging
import os
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

import dsnparse
import environ
from django.conf import locale
from django.core.management.utils import get_random_secret_key
from pydantic import BaseSettings, DirectoryPath, Field, root_validator
from pydantic.env_settings import SettingsSourceCallable

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Set base dir to something generic when compiling environment docs
if os.getenv("DOCS"):
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "rocky.settings.DjangoSettings")
    BASE_DIR = Path("../")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/
env = environ.Env()
environ.Env.read_env(BASE_DIR / ".env")


class BackwardsCompatibleEnvSettings:
    backwards_compatibility_list = [
        "ROCKY_DB",
        "ROCKY_DB_USER",
        "ROCKY_DB_PASSWORD",
        "ROCKY_DB_HOST",
        "ROCKY_DB_PORT",
    ]

    def __call__(self, settings: BaseSettings) -> Dict[str, Any]:
        d: Dict[str, Any] = {}
        env_vars = {k.upper(): v for k, v in os.environ.items()}

        if any(old_var in env_vars for old_var in self.backwards_compatibility_list):
            logging.warning("Deprecation: ROCKY_DB_* variables are deprecated, use ROCKY_DB_DSN instead")
            d["ROCKY_DB_DSN"] = (
                f"postgresql://"
                f"{env_vars['ROCKY_DB_USER']}"
                f":{env_vars['ROCKY_DB_PASSWORD']}"
                f"@{env_vars['ROCKY_DB_HOST']}"
                f":{env_vars['ROCKY_DB_PORT']}"
                f"/{env_vars['ROCKY_DB']}"
            )

        return d


class DjangoSettings(BaseSettings):
    """Application settings loaded from environment variables."""

    # SECURITY WARNING: keep the secret key used in production secret!

    BASE_DIR: Optional[DirectoryPath] = BASE_DIR
    SECRET_KEY: str = Field(default_factory=get_random_secret_key)
    DEBUG: bool = Field(True)

    QUEUE_URI: str = Field("")

    SCHEDULER_API: str = Field("")
    KEIKO_API: str = Field("")
    BYTES_API: str = Field("")
    OCTOPOES_API: str = Field("")

    BYTES_USERNAME: str = Field("")
    BYTES_PASSWORD: str = Field("")

    # # Report generation timeout in seconds
    KEIKO_REPORT_TIMEOUT: int = Field(60)

    SPAN_EXPORT_GRPC_ENDPOINT: str = Field(None)
    # TODO:
    # if SPAN_EXPORT_GRPC_ENDPOINT is not None:

    #### DJANGO SPECIFIC ####

    # Django specific

    # A list of strings representing the host/domain names that this Django site can serve.
    # https://docs.djangoproject.com/en/4.2/ref/settings/#allowed-hosts
    ALLOWED_HOSTS: List[str] = Field(["*"])

    # Make sure this header can never be set by an attacker, see also the security
    # warning at https://docs.djangoproject.com/en/4.2/howto/auth-remote-user/
    REMOTE_USER_HEADER: str = Field(None)
    REMOTE_USER_FALLBACK: bool = Field(False)

    if REMOTE_USER_HEADER:
        # Optional list of default organizations to add remote users to,
        # format: space separated list of ORGANIZATION_CODE:GROUP_NAME, e.g. `test:admin test2:redteam`
        REMOTE_USER_DEFAULT_ORGANIZATIONS = env.list("REMOTE_USER_DEFAULT_ORGANIZATIONS", default=[])
        AUTHENTICATION_BACKENDS: Optional[List[str]] = [
            "rocky.auth.remote_user.RemoteUserBackend",
        ]
        if REMOTE_USER_FALLBACK:
            AUTHENTICATION_BACKENDS += [
                "django.contrib.auth.backends.ModelBackend",
            ]

    # SECURITY WARNING: enable two factor authentication in production!
    TWOFACTOR_ENABLED: bool = Field(not REMOTE_USER_HEADER)

    CSP_HEADER: str = Field(True)

    MIDDLEWARE: List[str] = [
        "django.middleware.security.SecurityMiddleware",
        "django.contrib.sessions.middleware.SessionMiddleware",
        "django.middleware.locale.LocaleMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
    ]

    INSTALLED_APPS: List[str] = [
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        "django.forms",
        "django_otp",
        "django_otp.plugins.otp_static",
        "django_otp.plugins.otp_totp",
        "two_factor",
        "account",
        "tools",
        "fmea",
        "crisis_room",
        "onboarding",
        "katalogus",
        "django_password_validators",
        "django_password_validators.password_history",
        "rest_framework",
        "tagulous",
        # "drf_standardized_errors",
    ]

    if REMOTE_USER_HEADER:
        MIDDLEWARE += ["rocky.middleware.remote_user.RemoteUserMiddleware"]

    MIDDLEWARE += [
        "django_otp.middleware.OTPMiddleware",
        "rocky.middleware.auth_required.AuthRequiredMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
        "rocky.middleware.onboarding.OnboardingMiddleware",
    ]
    #
    TAG_COLORS = [
        ("color-1-light", ("Blue light")),
        ("color-1-medium", ("Blue medium")),
        ("color-1-dark", ("Blue dark")),
        ("color-2-light", ("Green light")),
        ("color-2-medium", ("Green medium")),
        ("color-2-dark", ("Green dark")),
        ("color-3-light", ("Yellow light")),
        ("color-3-medium", ("Yellow medium")),
        ("color-3-dark", ("Yellow dark")),
        ("color-4-light", ("Orange light")),
        ("color-4-medium", ("Orange medium")),
        ("color-4-dark", ("Orange dark")),
        ("color-5-light", ("Red light")),
        ("color-5-medium", ("Red medium")),
        ("color-5-dark", ("Red dark")),
        ("color-6-light", ("Violet light")),
        ("color-6-medium", ("Violet medium")),
        ("color-6-dark", ("Violet dark")),
    ]

    TAG_BORDER_TYPES = [
        ("plain", ("Plain")),
        ("solid", ("Solid")),
        ("dashed", ("Dashed")),
        ("dotted", ("Dotted")),
    ]

    AUTH_USER_MODEL = "account.KATUser"

    CACHES: Dict = {
        "default": {
            "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
            "LOCATION": "/var/tmp/django_cache",
            "TIMEOUT": 60,
            "OPTIONS": {"MAX_ENTRIES": 1000},
        }
    }

    TEMPLATES: List = [
        {
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "DIRS": [BASE_DIR / "rocky/templates"],
            "APP_DIRS": True,
            "OPTIONS": {
                "context_processors": [
                    "django.template.context_processors.debug",
                    "django.template.context_processors.request",
                    "django.contrib.auth.context_processors.auth",
                    "django.contrib.messages.context_processors.messages",
                    "tools.context_processors.languages",
                    "tools.context_processors.organizations_including_blocked",
                    "tools.context_processors.rocky_version",
                ],
                "builtins": ["tools.templatetags.ooi_extra"],
            },
        },
    ]

    ROCKY_DB_DSN: str = Field("postgresql://postgres:postgres@localhost:5432/rocky")

    @root_validator(allow_reuse=True)
    def default_database(cls, values):
        url = dsnparse.parse(values["ROCKY_DB_DSN"])

        values["DATABASES"] = {}
        values["DATABASES"]["default"] = {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": url.paths[0],
            "USER": url.username,
            "PASSWORD": url.password,
            "HOST": url.host,
            "PORT": url.port,
        }

        return values

    #
    #
    #
    #
    #
    #
    #
    #
    # # -----------------------------
    # # EMAIL CONFIGURATION for SMTP
    # # -----------------------------
    EMAIL_BACKEND = env("EMAIL_BACKEND", default="django.core.mail.backends.console.EmailBackend")
    EMAIL_FILE_PATH = env.path("EMAIL_FILE_PATH", BASE_DIR / "rocky/email_logs")  # directory to store output files
    EMAIL_HOST = env("EMAIL_HOST", default="localhost")  # localhost
    try:
        EMAIL_PORT = env.int("EMAIL_PORT", default=25)
    except ValueError:
        # We have an empty EMAIL_PORT= to rocky.conf in the Debian package. We
        # handle the empty string as default value here so we don't generate an
        # exception for this
        if env("EMAIL_PORT"):
            raise
    #
    EMAIL_PORT = 25
    #
    EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="")
    EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default="")
    DEFAULT_FROM_EMAIL: str = env("DEFAULT_FROM_EMAIL", default="")
    SERVER_EMAIL: str = env("SERVER_EMAIL", default="")
    EMAIL_SUBJECT_PREFIX = env("EMAIL_SUBJECT_PREFIX", default="KAT - ")
    EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", False)
    EMAIL_USE_SSL = env.bool("EMAIL_USE_SSL", False)
    EMAIL_SSL_CERTFILE: str = env("EMAIL_SSL_CERTFILE", default=None)
    EMAIL_SSL_KEYFILE: str = env("EMAIL_SSL_KEYFILE", default=None)
    EMAIL_TIMEOUT = 30  # 30 seconds
    # ----------------------------

    HELP_DESK_EMAIL = env("HELP_DESK_EMAIL", default="")

    ROOT_URLCONF = "rocky.urls"
    FORM_RENDERER = "django.forms.renderers.TemplatesSetting"

    WSGI_APPLICATION = "rocky.wsgi.application"
    #
    #
    # # Database
    # # https://docs.djangoproject.com/en/4.2/ref/settings/#databases
    # # try reading ROCKY_DB_DSN from environment, if not set fallback to old environment variables
    #
    # #
    # if env.bool("POSTGRES_SSL_ENABLED", False):
    #     DATABASES["default"]["OPTIONS"] = {
    #
    # # Password validation
    # # https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
    #
    #
    AUTH_PASSWORD_VALIDATORS: List = [
        {
            "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
            "OPTIONS": {
                "min_length": env.int("PASSWORD_MIN_LENGTH", 12),
            },
        },
        {
            "NAME": "django_password_validators.password_character_requirements"
            ".password_validation.PasswordCharacterValidator",
            "OPTIONS": {
                "min_length_digit": env.int("PASSWORD_MIN_DIGIT", 2),
                "min_length_alpha": env.int("PASSWORD_MIN_ALPHA", 2),
                "min_length_special": env.int("PASSWORD_MIN_SPECIAL", 2),
                "min_length_lower": env.int("PASSWORD_MIN_LOWER", 2),
                "min_length_upper": env.int("PASSWORD_MIN_UPPER", 2),
                "special_characters": " ~!@#$%^&*()_+{}\":;'[]",
            },
        },
    ]
    #
    # # Internationalization
    # # https://docs.djangoproject.com/en/4.2/topics/i18n/
    #
    LANGUAGE_CODE = "en"
    LANGUAGE_COOKIE_NAME = "language"

    TIME_ZONE = "UTC"

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True
    #
    LOCALE_PATHS: Tuple = (BASE_DIR / "rocky/locale",)
    #
    # # Add custom languages not provided by Django
    EXTRA_LANG_INFO = {
        "pap": {"bidi": False, "code": "pap", "name": "Papiamentu", "name_local": "Papiamentu"},
    }
    LANG_INFO = locale.LANG_INFO.copy()
    LANG_INFO.update(EXTRA_LANG_INFO)
    locale.LANG_INFO = LANG_INFO
    #
    LANGUAGES: List = [
        ("en", "en"),
        ("nl", "nl"),
        ("pap", "pap"),
    ]
    #
    # # Static files (CSS, JavaScript, Images)
    # # https://docs.djangoproject.com/en/4.2/howto/static-files/
    #
    STATIC_URL = "/static/"
    STATIC_ROOT: Path = BASE_DIR / "static"
    STATICFILES_DIRS: Tuple = (BASE_DIR / "assets",)
    #
    LOGIN_URL = "two_factor:login"
    LOGIN_REDIRECT_URL = "crisis_room"
    #
    # # Default primary key field type
    # # https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
    #
    DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

    SESSION_EXPIRE_SECONDS = env.int("SESSION_EXPIRE_SECONDS", 7200)
    SESSION_EXPIRE_AFTER_LAST_ACTIVITY = True
    #
    # # Require session cookie to be secure, so only a https session can be started
    SESSION_COOKIE_SECURE = True
    #
    # # Also set the max age on the session cookie
    SESSION_COOKIE_AGE = SESSION_EXPIRE_SECONDS
    #
    SESSION_COOKIE_SAMESITE: str = "Strict"
    #
    # # only allow http to read session cookies, not Javascript
    SESSION_COOKIE_HTTPONLY = True
    #
    # # No secure connection means you're not allowed to submit a form
    CSRF_COOKIE_SECURE = True
    #
    # # Chrome does not send the csrfcookie
    CSRF_COOKIE_SAMESITE: str = "Strict"
    #
    # # only allow http to read csrf cookies, not Javascript
    CSRF_COOKIE_HTTPONLY = True
    #
    # # A list of trusted origins for unsafe requests (e.g. POST)
    # # https://docs.djangoproject.com/en/4.2/ref/settings/#csrf-trusted-origins
    CSRF_TRUSTED_ORIGINS: List = env.list("DJANGO_CSRF_TRUSTED_ORIGINS", default=[])
    #
    # # # Configuration for Gitpod
    GITPOD_WORKSPACE_URL: str = env("GITPOD_WORKSPACE_URL", default=None)
    if GITPOD_WORKSPACE_URL:
        # example environment variable: GITPOD_WORKSPACE_URL=https://minvws-nlkatcoordinatio-fykdue22b07.ws-eu98.gitpod.io
        # public url on https://8000-minvws-nlkatcoordinatio-fykdue22b07.ws-eu98.gitpod.io/
        ALLOWED_HOSTS.append("8000-" + GITPOD_WORKSPACE_URL.split("//")[1])
        CSRF_TRUSTED_ORIGINS.append(GITPOD_WORKSPACE_URL.replace("//", "//8000-"))

    # Configuration for GitHub Codespaces
    GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN: str = env("GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN", default=None)
    if GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN:
        # example environment variable: GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN=preview.app.github.dev
        # public url on https://praseodym-organic-engine-9j6465vx3xgx6-8000.preview.app.github.dev/
        ALLOWED_HOSTS.append("." + GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN)
        CSRF_TRUSTED_ORIGINS.append("https://*." + GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN)
    #
    # # Setup sane security defaults for application
    # # Deny x-framing, which is standard since Django 3.0
    # # There is no need to embed this in a frame anywhere, not desired.
    X_FRAME_OPTIONS = "DENY"
    # # Send some legacy security headers
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    #
    #
    #
    CSP_DEFAULT_SRC = ["'none'"]
    CSP_IMG_SRC = ["'self'"]
    CSP_FONT_SRC = ["'self'"]
    CSP_STYLE_SRC = ["'self'"]
    CSP_FRAME_ANCESTORS = ["'none'"]
    CSP_BASE = ["'none'"]
    CSP_FORM_ACTION = ["'self'"]
    CSP_INCLUDE_NONCE_IN = ["script-src"]
    CSP_CONNECT_SRC = ["'self'"]

    CSP_BLOCK_ALL_MIXED_CONTENT = True

    DEFAULT_RENDERER_CLASSES = ["rest_framework.renderers.JSONRenderer"]

    # # Turn on the browsable API by default if DEBUG is True, but disable by default in production
    BROWSABLE_API = env.bool("BROWSABLE_API", DEBUG)
    #
    if BROWSABLE_API:
        DEFAULT_RENDERER_CLASSES = DEFAULT_RENDERER_CLASSES + ["rest_framework.renderers.BrowsableAPIRenderer"]
    #
    REST_FRAMEWORK = {
        "DEFAULT_PERMISSION_CLASSES": [
            # For now this will provide a safe default, but non-admin users will
            # need to be able to use the API in the future..
            "rest_framework.permissions.IsAdminUser",
        ],
        "DEFAULT_RENDERER_CLASSES": DEFAULT_RENDERER_CLASSES,
        "EXCEPTION_HANDLER": "drf_standardized_errors.handler.exception_handler",
    }
    #
    SERIALIZATION_MODULES: Dict = {
        "xml": "tagulous.serializers.xml_serializer",
        "json": "tagulous.serializers.json",
        "python": "tagulous.serializers.python",
        "yaml": "tagulous.serializers.pyyaml",
    }
    TAGULOUS_SLUG_ALLOW_UNICODE = True

    # if SPAN_EXPORT_GRPC_ENDPOINT is not None:

    if CSP_HEADER:
        MIDDLEWARE += ["csp.middleware.CSPMiddleware"]
        INSTALLED_APPS += ["csp"]

    class Config:
        @classmethod
        def customise_sources(
            cls,
            init_settings: SettingsSourceCallable,
            env_settings: SettingsSourceCallable,
            file_secret_settings: SettingsSourceCallable,
        ) -> Tuple[SettingsSourceCallable, ...]:
            backwards_compatible_settings = BackwardsCompatibleEnvSettings()
            return env_settings, init_settings, file_secret_settings, backwards_compatible_settings
