from datetime import datetime
from logging import getLogger
from typing import Dict

from django.utils.translation import gettext_lazy as _

from octopoes.models.ooi.network import IPAddressV4, IPAddressV6
from reports.report_types.definitions import Report

logger = getLogger(__name__)


class VulnerabilityReport(Report):
    id = "vulnerability-report"
    name = _("Vulnerability Report")
    description: str = _("Vulnerabilities found are grouped for each system.")
    plugins = {"required": ["shodan", "nmap"], "optional": []}
    input_ooi_types = {IPAddressV4, IPAddressV6}
    template_path = "vulnerability_report/report.html"

    def generate_data(self, input_ooi: str, valid_time: datetime) -> Dict[str, Dict[str, Dict[str, str]]]:
        mock_data = {
            "CVE-2012-12345": {
                "CVSS": "Critical",
                "Source": "Shodan",
                "First seen": "1 october 2023 11:00",
                "Last seen": "6 october 2023 12:34",
                "Description": "An attacker can get RCE by a buffer overflow.",
                "Advice": "Update the Apache server to version x.y.",
                "Evidence": "Execute the following commands: nc ipv6.example.com 443 "
                "secretdorkbackdoorthing+xklj&^&^^^^/../../../ root #/",
            },
            "CVE-2013-12345": {
                "CVSS": "Medium",
                "Source": "Nmap",
                "First seen": "1 october 2023 12:00",
                "Last seen": "6 october 2023 12:44",
                "Description": "Dangerous description",
                "Advice": "Patch it with your ..",
                "Evidence": "Execute the following commands: nc ipv6.example.com 443 ",
            },
        }

        return {"vulnerabilities": mock_data}
