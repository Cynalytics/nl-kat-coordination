from collections import Counter
from datetime import datetime
from logging import getLogger
from typing import Any, Dict, List, Union

from django.utils.translation import gettext_lazy as _

from octopoes.models import Reference
from octopoes.models.ooi.findings import RiskLevelSeverity
from octopoes.models.ooi.network import IPAddressV4, IPAddressV6
from reports.report_types.definitions import Report
from rocky.views.mixins import FindingList, HydratedFinding

logger = getLogger(__name__)


class VulnerabilityReport(Report):
    id = "vulnerability-report"
    name = _("Vulnerability Report")
    description: str = _("Vulnerabilities found are grouped for each system.")
    plugins = {"required": ["nmap-ports", "nmap", "nmap-udp", "website-software"], "optional": ["shodan"]}
    input_ooi_types = {IPAddressV4, IPAddressV6}
    template_path = "vulnerability_report/report.html"

    def get_finding_valid_time_history(self, reference: str) -> List[datetime]:
        transaction_record = self.octopoes_api_connector.get_history(reference=reference)
        valid_time_history = [transaction.valid_time for transaction in transaction_record]
        return valid_time_history

    def get_findings(self, input_ooi: str, valid_time: datetime) -> Dict[str, List[Union[str, HydratedFinding]]]:
        ip = str(self.octopoes_api_connector.get(Reference.from_str(input_ooi)).address)
        excluded_severities = [RiskLevelSeverity.PENDING.value, RiskLevelSeverity.UNKNOWN.value]

        severities = {
            RiskLevelSeverity(severity.value)
            for severity in RiskLevelSeverity
            if severity.value not in excluded_severities
        }

        findings = FindingList(
            octopoes_connector=self.octopoes_api_connector,
            valid_time=valid_time,
            exclude_muted=False,
            severities=severities,
        )

        aggregated_findings = []
        finding_types = []

        for finding in findings[:]:
            if ip in finding.ooi.primary_key:
                aggregated_findings.append(finding)
                finding_types.append(finding.finding_type.id)
        return {"finding_types": finding_types, "findings": aggregated_findings}

    def generate_data(self, input_ooi: str, valid_time: datetime) -> Dict[str, Dict[str, Any]]:
        findings = self.get_findings(input_ooi, valid_time)
        vulnerabilities = {}
        occurrences = Counter(findings["finding_types"])
        critical = RiskLevelSeverity.CRITICAL.value
        total_criticals = 0
        first_seen = "-"
        last_seen = "-"
        terms = list(occurrences)
        recommendations = []

        finding_types = list(set(findings["finding_types"]))

        for finding_type in finding_types:
            filtered_findings = {}

            for finding in findings["findings"]:
                if finding.finding_type.id == finding_type:
                    time_history = self.get_finding_valid_time_history(finding.ooi.primary_key)
                    if time_history:
                        last_seen = time_history[0]

                    filtered_findings[finding.ooi.primary_key] = {
                        str(_("Source")): "-",
                        str(_("First seen")): first_seen,
                        str(_("Last seen")): last_seen,
                        str(_("Evidence")): "-",
                    }
                    vulnerabilities[finding_type] = {
                        "cvss": {
                            "class": str(finding.finding_type.risk_severity.value).lower(),
                            "risk_level": str(finding.finding_type.risk_severity.value).title()
                            + " "
                            + str(finding.finding_type.risk_score),
                        },
                        "occurrences": occurrences[finding_type],
                        "description": finding.finding_type.description or "-",
                        "advice": finding.finding_type.recommendation or "-",
                        "findings": filtered_findings,
                    }

                    if finding.finding_type.risk_severity.value == critical:
                        total_criticals += 1

                    if finding.finding_type.recommendation:
                        recommendations.append(finding.finding_type.recommendation)

        summary = {
            "total_findings": sum(occurrences.values()),
            "total_criticals": total_criticals,
            "terms": terms,
            "recommendations": recommendations,
        }

        return {"vulnerabilities": vulnerabilities, "summary": summary}
