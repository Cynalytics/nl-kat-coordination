import ipaddress
import mimetypes
from os import getenv
from typing import List, Tuple, Union
from urllib.parse import urlparse, urlunsplit

import requests
from forcediphttpsadapter.adapters import ForcedIPHTTPSAdapter
from requests import Session

from boefjes.job_models import BoefjeMeta

ENDPOINT_PATH = "/mifs/c/windows/api/v2/device/registration"
ALLOWED_CONTENT_TYPES = mimetypes.types_map.values()


def run(boefje_meta: BoefjeMeta) -> List[Tuple[set, Union[str, bytes]]]:
    input_ = boefje_meta.arguments["input"]  # input is website
    hostname = input_["hostname"]["name"]

    useragent = getenv("USERAGENT", default="OpenKAT")

    uri = get_uri(input_)
    ip = input_["ip_service"]["ip_port"]["address"]["address"]
    # Code from https://github.com/Roadmaster/forcediphttpsadapter/blob/master/example.py
    url_parts = urlparse(uri)
    session = requests.Session()

    if url_parts.scheme == "https":
        # Adapter is available, use it regardless of Python version
        base_url = urlunsplit((url_parts.scheme, url_parts.netloc, "", "", ""))
        session.mount(base_url, ForcedIPHTTPSAdapter(dest_ip=ip))
    else:
        # Fall back to old hack-ip-into-url behavior, for either https with no adapter, or http.
        if ip:
            try:
                addr = ipaddress.ip_address(ip)
            except ValueError:
                # Not a valid IP address, so don't try to hack it into the URL
                pass
            else:
                if addr.version == 6:
                    # IPv6 addresses need to be wrapped in brackets
                    url_parts = url_parts._replace(netloc=f"[{ip}]")

            uri = urlunsplit(
                [
                    url_parts.scheme,
                    url_parts.netloc,
                    url_parts.path,
                    url_parts.query,
                    url_parts.fragment,
                ]
            )

    try:
        response = do_request(hostname, session, uri, useragent)
    except requests.exceptions.RequestException as request_error:
        return [({"openkat-http/error"}, str(request_error))]

    body_mimetypes = {"openkat-http/body"}
    try:
        response = do_request(hostname, session, uri, useragent)
    except requests.exceptions.RequestException as request_error:
        return [({"openkat-http/error"}, str(request_error))]

    if "content-type" in response.headers:
        content_type = response.headers["content-type"]

        if content_type in ALLOWED_CONTENT_TYPES:
            body_mimetypes.add(content_type)

        # Pick up the content type for the body from the server and split away encodings to make normalization easier
        content_type = content_type.split(";")
        if content_type[0] in ALLOWED_CONTENT_TYPES:
            body_mimetypes.add(content_type[0])

    return [
        (body_mimetypes, response.content),
    ]


def do_request(hostname: str, session: Session, uri: str, useragent: str):
    response = session.get(
        uri,
        headers={"Host": hostname, "User-Agent": useragent},
        verify=False,
        allow_redirects=False,
    )

    return response


def get_uri(input_: dict) -> str:
    port = f":{input_['ip_service']['ip_port']['port']}"
    netloc = input_["hostname"]["name"]
    uri = f"{input_['ip_service']['service']['name']}://{netloc}{port}{ENDPOINT_PATH}"

    return uri
