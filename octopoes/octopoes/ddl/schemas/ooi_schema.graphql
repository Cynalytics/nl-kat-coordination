type Hostname implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["network", "name"]): ID!
  human_readable(format: String! = "{name} @ {network_name}"): String!

  name: HostnameX!
  network(reverse_name: String = "hostnames"): Network!
}


# Networking
type Network implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["name"]): ID!
  human_readable(format: String! = "{name}"): String!

  name: String!
}


# IPAddress and services
interface IPAddress implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["network", "address"]): ID!
  human_readable(format: String! = "{address} @ {network_name}"): String!

  network(reverse_name: String! = "ip_addresses"): Network!
  #  address: String!
}

type IPv4Address implements BaseObject & OOI & IPAddress {
  object_type: String!
  primary_key(natural_key: [String!] = ["network", "address"]): ID!
  human_readable(format: String! = "{address} @ {network_name}"): String!

  network(reverse_name: String! = "ip_v4_addresses"): Network!
  address: IPv4!
}

type IPv6Address implements BaseObject & OOI & IPAddress {
  object_type: String!
  primary_key(natural_key: [String!] = ["network", "address"]): ID!
  human_readable(format: String! = "{address} @ {network_name}"): String!

  network(reverse_name: String! = "ip_v6_addresses"): Network!
  address: IPv6!
}

union UIPAddress = IPv4Address | IPv6Address


enum PortProtocol { tcp, udp }
enum PortState { open, closed, filtered, open_filtered, closed_filtered }

type IPPort implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["address", "port"]): ID!
  human_readable(format: String! = "{address_address}:{port}"): String!

  address(reverse_name: String! = "ports"): UIPAddress!
  protocol: PortProtocol
  port: Int!
  state: PortState
}

type Service implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["name"]): ID!
  human_readable(format: String! = "{name}"): String!

  name: String!
}

type IPService implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["port", "service"]): ID!
  human_readable(format: String! = "{service_name} @ {port_address_address}:{port_port}"): String!

  port(reverse_name: String! = "services"): IPPort!
  service(reverse_name: String! = "ip_services"): Service!
}

# DNS
enum DNSRecordType { A, AAAA, CNAME, MX, NS, PTR, SOA, SRV, TXT }

interface DNSRecordBase implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["hostname", "type", "value"]): ID!
  human_readable(format: String! = "{hostname_name} {type} {value}"): String!

  hostname(reverse_name: String! = "dns_records"): Hostname!
  type: DNSRecordType!
  value: String!
  ttl: Int
}

type DNSARecord implements BaseObject & OOI & DNSRecordBase {
  object_type: String!
  primary_key(natural_key: [String!] = ["hostname", "type", "value"]): ID!
  human_readable(format: String! = "{hostname_name} {type} {value}"): String!

  hostname(reverse_name: String! = "dns_a_records"): Hostname!
  type: DNSRecordType!
  value: String!
  address(reverse_name: String! = "dns_a_records"): IPv4Address
  ttl: Int
}
type DNSAAAARecord implements BaseObject & OOI & DNSRecordBase {
  object_type: String!
  primary_key(natural_key: [String!] = ["hostname", "type", "value"]): ID!
  human_readable(format: String! = "{hostname_name} {type} {value}"): String!

  hostname(reverse_name: String! = "dns_aaaa_records"): Hostname!
  type: DNSRecordType!
  value: String!
  address(reverse_name: String = "dns_aaaa_records"): IPv6Address
  ttl: Int
}
type DNSMXRecord implements BaseObject & OOI & DNSRecordBase {
  object_type: String!
  primary_key(natural_key: [String!] = ["hostname", "type", "value"]): ID!
  human_readable(format: String! = "{hostname_name} {type} {value}"): String!

  hostname(reverse_name: String! = "dns_mx_records"): Hostname!
  type: DNSRecordType!
  value: String!
  mx_hostname(reverse_name: String! = "mx_hostname_of"): Hostname
  ttl: Int
}

type DNSTXTRecord implements BaseObject & OOI & DNSRecordBase {
  object_type: String!
  primary_key(natural_key: [String!] = ["hostname", "type", "value"]): ID!
  human_readable(format: String! = "{hostname_name} {type} {value}"): String!

  hostname(reverse_name: String! = "dns_txt_records"): Hostname!
  type: DNSRecordType!
  value: String!
  ttl: Int
}

type DNSNSRecord implements BaseObject & OOI & DNSRecordBase {
  object_type: String!
  primary_key(natural_key: [String!] = ["hostname", "type", "value"]): ID!
  human_readable(format: String! = "{hostname_name} {type} {value}"): String!

  hostname(reverse_name: String! = "dns_ns_records"): Hostname!
  target_hostname(reverse_name: String! = "ns_record_targets"): Hostname!
  type: DNSRecordType!
  value: String!
  ttl: Int
}

type DNSCNAMERecord implements BaseObject & OOI & DNSRecordBase {
  object_type: String!
  primary_key(natural_key: [String!] = ["hostname", "type", "value"]): ID!
  human_readable(format: String! = "{hostname_name} {type} {value}"): String!

  hostname(reverse_name: String! = "dns_cname_records"): Hostname!
  target_hostname(reverse_name: String! = "cname_target_of"): Hostname!
  type: DNSRecordType!
  value: String!
  ttl: Int
}

type DNSSOARecord implements BaseObject & OOI & DNSRecordBase {
  object_type: String!
  primary_key(natural_key: [String!] = ["hostname", "type", "value"]): ID!
  human_readable(format: String! = "{hostname_name} {type} {value}"): String!

  hostname(reverse_name: String! = "dns_soa_records"): Hostname!
  type: DNSRecordType!
  value: String!
  serial: Int
  refresh: Int
  retry: Int
  expire: Int
  minimum: Int
  ttl: Int

  primary_ns(reverse_name: String! = "primary_ns_of"): Hostname
  admin_email(reverse_name: String! = "dns_soa_admin_email_of"): Hostname
}

type NXDOMAIN implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["hostname", "type", "value"]): ID!
  human_readable(format: String! = "{hostname_name} {type} {value}"): String!

  hostname(reverse_name: String! = "nxdomain_hostname"): Hostname!
  value: String!
}

type DNSZone implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["hostname", "type", "value"]): ID!
  human_readable(format: String! = "{hostname_name} {type} {value}"): String!

  hostname(reverse_name: String! = "dns_zone_hostname"): Hostname!
  parent(reverse_name: String! = "child_dns_zones"): DNSZone!
  value: String!
}

# Certificates
enum AlgorithmType { RSA, ECC }

type X509Certificate implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["issuer", "serial_number"]): ID!
  human_readable(format: String! = "{issuer} ({serial_number})"): String!

  subject: String!
  issuer: String
  valid_from: String!
  valid_until: String!
  pk_algorithm: String
  pk_size: String
  pk_number: String
  signed_by: X509Certificate
  serial_number: String!
  expires_in: Int

  signed_by(reverse_name: String! = "signed_certificates"): X509Certificate

}

type SubjectAlternativeName implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["hostname", "type", "value"]): ID!
  human_readable(format: String! = "{hostname_name} {type} {value}"): String!

  hostname(reverse_name: String! = "dns_zone_hostname"): Hostname!
  parent(reverse_name: String! = "child_dns_zones"): DNSZone!
  subject: String!
  issuer: String
  valid_from: String!
  valid_until: String!
  pk_algorithm: String
  pk_size: String
  pk_number: String
  signed_by: X509Certificate
  serial_number: String
  expires_in: Int

  signed_by(reverse_name: String! = "signed_certificates"): X509Certificate

}

type SubjectAlternativeNameHostname implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["hostname", "type", "value"]): ID!
  human_readable(format: String! = "{hostname_name} {type} {value}"): String!

  hostname(reverse_name: String! = "dns_zone_hostname"): Hostname!
  parent(reverse_name: String! = "child_dns_zones"): DNSZone!
  subject: String!
  issuer: String
  valid_from: String!
  valid_until: String!
  pk_algorithm: String
  pk_size: String
  pk_number: String
  signed_by: X509Certificate
  serial_number: String
  expires_in: Int

  signed_by(reverse_name: String! = "signed_certificates"): X509Certificate

}

type SubjectAlternativeNameIP implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["issuer", "serial_number", "value", "address"]): ID!
  human_readable(format: String! = "{hostname_name} {type} {value}"): String!

  hostname(reverse_name: String! = "dns_zone_hostname"): Hostname!
  parent(reverse_name: String! = "child_dns_zones"): DNSZone!
  subject: String!
  issuer: String
  valid_from: String!
  valid_until: String!
  pk_algorithm: String
  pk_size: String
  pk_number: String
  signed_by: X509Certificate
  serial_number: String
  expires_in: Int

  signed_by(reverse_name: String! = "signed_certificates"): X509Certificate

}

type SubjectAlternativeNameQualifier implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["issuer", "serial_number", "value", "name"]): ID!
  human_readable(format: String! = "{issuer} {serial_number} {value}"): String!

  hostname(reverse_name: String! = "dns_zone_hostname"): Hostname!
  parent(reverse_name: String! = "child_dns_zones"): DNSZone!
  subject: String!
  issuer: String
  valid_from: String!
  valid_until: String!
  pk_algorithm: String
  pk_size: String
  pk_number: String
  signed_by: X509Certificate
  serial_number: String
  expires_in: Int

  signed_by(reverse_name: String! = "signed_certificates"): X509Certificate
  name: String!

}

# E-mail security
type DNSSPFRecord implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["dns_txt_record", "value"]): ID!
  human_readable(format: String! = "SPF Record of {dns_txt_record}"): String!

  value: String!
  ttl: Int
  all: String
  exp: String

  dns_txt_record(reverse_name: String! = "dns_spf_record"): DNSTXTRecord!

}

type DNSSPFMechanism implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["dns_txt_record", "value"]): ID!
  human_readable(format: String! = "SPF Record of {dns_txt_record}"): String!

  spf_record(reverse_name: String! = "spf_record"): DNSSPFRecord!
  mechanism: String!

}

type DNSSPFMechanismIP implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["spf_record", "mechanism", "ip"]): ID!
  human_readable(format: String! = "SPF Record of {dns_txt_record}"): String!

  spf_record(reverse_name: String! = "spf_ip_mechanisms"): DNSSPFRecord!
  mechanism: String!
  ip(reverse_name: String! = "dns_spf_record"): IPAddress!

}

type DNSSPFMechanismHostname implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["spf_record", "mechanism", "hostname"]): ID!
  human_readable(format: String! = "SPF Record of {dns_txt_record}"): String!

  spf_record(reverse_name: String! = "spf_hostname_mechanisms"): DNSSPFRecord!
  mechanism: String!
  hostname(reverse_name: String! = "hostname"): Hostname!

}

type DNSSPFMechanismNetBlock implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["spf_record", "mechanism", "netblock"]): ID!
  human_readable(format: String! = "SPF Record of {dns_txt_record}"): String!

  spf_record(reverse_name: String! = "spf_netblock_mechanisms"): DNSSPFRecord!
  mechanism: String!
  netblock(reverse_name: String! = "netblock"): NetBlock!

}

type DMARCTXTRecord implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["value", "hostname"]): ID!
  human_readable(format: String! = "DMARC TXT Record of {hostname}"): String!

  value: String!
  ttl: Int
  hostname(reverse_name: String! = "dmarc_txt_record"): Hostname!
}

type DKIMExists implements BaseObject & OOI {
  object_type: String!
  primary_key(natural_key: [String!] = ["value", "hostname"]): ID!
  human_readable(format: String! = "DMARC TXT Record of {hostname}"): String!

  value: String!
  ttl: Int
  hostname(reverse_name: String! = "dkim_exists"): Hostname!
}

