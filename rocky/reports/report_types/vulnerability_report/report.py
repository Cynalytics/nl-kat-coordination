from collections import Counter
from datetime import datetime
from logging import getLogger
from typing import Dict

from django.utils.translation import gettext_lazy as _

from octopoes.models import Reference
from octopoes.models.ooi.findings import RiskLevelSeverity
from octopoes.models.ooi.network import IPAddressV4, IPAddressV6
from reports.report_types.definitions import Report
from rocky.views.mixins import FindingList

logger = getLogger(__name__)


class VulnerabilityReport(Report):
    id = "vulnerability-report"
    name = _("Vulnerability Report")
    description: str = _("Vulnerabilities found are grouped for each system.")
    plugins = {"required": ["shodan", "nmap"], "optional": []}
    input_ooi_types = {IPAddressV4, IPAddressV6}
    template_path = "vulnerability_report/report.html"
    summary = {}

    def count_critical_finding(self, finding) -> int:
        counted: int = 0
        if finding.finding_type.risk_severity.value == RiskLevelSeverity.CRITICAL:
            counted = 1
        return counted

    def generate_data(self, input_ooi: str, valid_time: datetime) -> Dict[str, Dict[str, Dict[str, str]]]:
        tree_store = self.octopoes_api_connector.get_tree(
            Reference.from_str(input_ooi), depth=1, types=self.input_ooi_types, valid_time=valid_time
        ).store

        refs = [str(tree.address) for tree in tree_store.values()]

        all_severities = {RiskLevelSeverity(severity.value) for severity in RiskLevelSeverity}

        findings = FindingList(
            octopoes_connector=self.octopoes_api_connector,
            valid_time=valid_time,
            exclude_muted=False,
            severities=all_severities,
        )

        aggregated_findings = []
        finding_types = []

        for finding in findings[:]:
            for ref in refs:
                if ref in finding.ooi.primary_key:
                    aggregated_findings.append(finding)
                    finding_types.append(finding.finding_type.id)

        vulnerabilities = {}
        occurrences = Counter(finding_types)

        for finding_type in finding_types:
            filtered_findings = {}
            for finding in aggregated_findings:
                if finding.finding_type.id == finding_type:
                    filtered_findings[finding.ooi.primary_key] = {
                        _("Source"): "-",
                        _("First seen"): "-",
                        _("Last seen"): "-",
                        _("Evidence"): "-",
                    }
                    vulnerabilities[finding_type] = {
                        "cvss": {
                            "class": str(finding.finding_type.risk_severity.value).lower(),
                            "risk_level": str(finding.finding_type.risk_severity.value).title()
                            + " "
                            + str(finding.finding_type.risk_score),
                        },
                        "occurrences": occurrences[finding_type],
                        "description": finding.finding_type.description or "-",
                        "advice": finding.finding_type.recommendation or "-",
                        "findings": filtered_findings,
                    }
                    self.summary["critical_vulnerabilities"] = self.count_critical_finding(finding)

        return vulnerabilities
